#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import re
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("log.txt", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∞–¥–º–∏–Ω–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not BOT_TOKEN:
    logger.error("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    exit(1)

# –õ–æ–≥–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ ADMIN_ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω ADMIN_ID: {ADMIN_ID}")

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
PATTERNS = [
    r"\b–∞—Ö—É[–π–µ—ë]\b",
    r"\b–≤–∞—Ö—É–π\b",  # –î–æ–±–∞–≤–ª–µ–Ω–æ "–≤–∞—Ö—É–π"
    r"\b–∞—Ñ–∏–≥\b",
    r"\b–∞—Ñ—ñ–≥\b",  # –° —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π "—ñ"
    r"\b–≤\s*–∞—Ñ[–∏—ñ]–≥–µ\b",
    r"\b–≤\s*–∞—Ñ—ñ–≥—ñ\b",  # –° —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π "—ñ"
    r"\b–æ—Ö[—É–µ]–µ[–≤—Ç–ª–Ω]\b",
    r"\b–æ–±–∞–ª?–¥–µ[–≤—Ç–ª–Ω]\b",
    r"\b–≤\s*—à–æ–∫–µ\b",
    r"\b—à–æ–∫\b",
    r"\b–Ω–µ\s*–º–æ–≥[—É–µ]?\s*–ø–æ–≤–µ—Ä–∏—Ç—å\b",
    r"\bwtf\b"  # –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
]

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
COMPILED_PATTERNS = [re.compile(pattern, re.IGNORECASE) for pattern in PATTERNS]

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
COUNTER_FILE = "counter.json"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
def load_counter():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(COUNTER_FILE):
            with open(COUNTER_FILE, "r", encoding="utf-8") as file:
                return json.load(file)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—á–µ—Ç—á–∏–∫–∞: {e}")
    return {}

def save_counter(counter):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
    try:
        with open(COUNTER_FILE, "w", encoding="utf-8") as file:
            json.dump(counter, file, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞: {e}")

def increment_counter(user_id, username, first_name, chat_id):
    """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    counter = load_counter()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JSON
    chat_id_str = str(chat_id)
    user_id_str = str(user_id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è —á–∞—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if chat_id_str not in counter:
        counter[chat_id_str] = {}
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id_str not in counter[chat_id_str]:
        counter[chat_id_str][user_id_str] = {
            "count": 0,
            "username": username or None,
            "firstName": first_name or None,
            "lastUpdate": None
        }
    
    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    counter[chat_id_str][user_id_str]["count"] += 1
    counter[chat_id_str][user_id_str]["lastUpdate"] = datetime.now().isoformat()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if username and counter[chat_id_str][user_id_str]["username"] != username:
        counter[chat_id_str][user_id_str]["username"] = username
    
    if first_name and counter[chat_id_str][user_id_str]["firstName"] != first_name:
        counter[chat_id_str][user_id_str]["firstName"] = first_name
    
    save_counter(counter)
    return counter[chat_id_str][user_id_str]["count"]

def format_stats(chat_stats):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if not chat_stats:
        return "–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –∞—Ö—É–µ–ª! –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º üòâ"
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    users = [
        {
            "user_id": user_id,
            "count": data["count"],
            "username": data.get("username"),
            "firstName": data.get("firstName")
        }
        for user_id, data in chat_stats.items()
    ]
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—á–µ—Ç—á–∏–∫–∞
    users.sort(key=lambda x: x["count"], reverse=True)
    
    result = "üèÜ –†–µ–π—Ç–∏–Ω–≥ –∞—Ö—É–µ–≤—à–∏—Ö:\n\n"
    
    for index, user in enumerate(users):
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–¥–∞–ª–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –º–µ—Å—Ç
        if index == 0:
            medal = "ü•á"
        elif index == 1:
            medal = "ü•à"
        elif index == 2:
            medal = "ü•â"
        else:
            medal = f"{index + 1}."
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å HTML-—Å—Å—ã–ª–∫–æ–π
        if user["username"]:
            name = f'<a href="https://t.me/{user["username"]}">{user["username"]}</a>'
        elif user["firstName"]:
            name = user["firstName"]
        else:
            name = "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"
        
        result += f"{medal} {name}: {user['count']} —Ä–∞–∑(–∞)\n"
    
    return result

def reset_counter(chat_id=None):
    """–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –µ—Å–ª–∏ chat_id=None"""
    counter = load_counter()
    
    if chat_id:
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
        chat_id_str = str(chat_id)
        if chat_id_str in counter:
            # –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
            for user_id in counter[chat_id_str]:
                counter[chat_id_str][user_id]["count"] = 0
                counter[chat_id_str][user_id]["lastUpdate"] = datetime.now().isoformat()
            
            save_counter(counter)
            return f"–°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id_str} —Å–±—Ä–æ—à–µ–Ω—ã"
        else:
            return f"–ß–∞—Ç {chat_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
    else:
        # –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö
        for chat_id_str in counter:
            for user_id in counter[chat_id_str]:
                counter[chat_id_str][user_id]["count"] = 0
                counter[chat_id_str][user_id]["lastUpdate"] = datetime.now().isoformat()
        
        save_counter(counter)
        return "–°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏ —É–¥–∏–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ.\n\n"
        "–Ø –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é, –∫—Ç–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ \"–∞—Ö—É–µ–ª\" –∏ –≤–µ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
    )
    
    await update.message.reply_text(message)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} ({update.effective_user.username or update.effective_user.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    message = (
        "‚Ä¢ üîç –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è —É–¥–∏–≤–ª–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n"
        "‚Ä¢ üèÜ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –∞—Ö—É–µ–≤—à–∏—Ö –≤ —á–∞—Ç–µ /ahuy"
    )
    
    await update.message.reply_text(message)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} ({update.effective_user.username or update.effective_user.first_name}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    chat_id = str(update.effective_chat.id)
    counter = load_counter()
    
    if chat_id not in counter or not counter[chat_id]:
        await update.message.reply_text("–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –∞—Ö—É–µ–ª! –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º üòâ")
        return
    
    stats = format_stats(counter[chat_id])
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–≤—å—é –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await update.message.reply_html(stats, disable_web_page_preview=True)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} ({update.effective_user.username or update.effective_user.first_name}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —á–∞—Ç–µ {chat_id}")

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rsahuy –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = str(update.effective_user.id)
    
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –∞–¥–º–∏–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞: user_id={user_id}, ADMIN_ID={ADMIN_ID}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not ADMIN_ID or user_id != str(ADMIN_ID):
        # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –≤ —á–∞—Ç–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–±—Ä–æ—Å–∞ –±–µ–∑ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    chat_id = update.effective_chat.id
    result = reset_counter(chat_id)
    
    await update.message.reply_text(result)
    logger.info(f"–ê–¥–º–∏–Ω {user_id} —Å–±—Ä–æ—Å–∏–ª —Å—á–µ—Ç—á–∏–∫–∏ –≤ —á–∞—Ç–µ {chat_id}")

async def process_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text:
        return
    
    text = update.message.text
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    matched = any(pattern.search(text) for pattern in COMPILED_PATTERNS)
    
    if matched:
        new_count = increment_counter(
            user.id, 
            user.username, 
            user.first_name, 
            chat_id
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username or user.first_name}) –∞—Ö—É–µ–ª {new_count} —Ä–∞–∑(–∞) –≤ —á–∞—Ç–µ {chat_id}")
        
        # –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –±–æ—Ç –Ω–µ –ø–∏—à–µ—Ç –≤ —á–∞—Ç

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    # –ö–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ CommandHandler
    for command in ["ahuy", "top"]:
        application.add_handler(CommandHandler(command, stats_command))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–±—Ä–æ—Å–∞
    application.add_handler(CommandHandler("rsahuy", reset_command))
    application.add_handler(CommandHandler("rssahuy", reset_command))  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()